# ФУНКЦИИ ДЛЯ ОБРАБОТКИ ТЕЛЕФОНА
import re
def sanitize_n_check_phone (phone): 
    # Функция принимает на вход телефон с кодом страны или без, удаляет из него лишние символы, проверяет на валидность. 
    # Если валиден - возвращает телефон в формате +380*********, иначе возвращает False
    def sanitize_phone_number(phone):
        # Убирает типичные лишние символы 
        new_phone = (
            phone.strip()
            .removeprefix("+")
            .replace("(", "")
            .replace(")", "")
            .replace("-", "")
            .replace(" ", "")
        )
        return new_phone

    
    def check_phone_number(new_phone): 
        #Функция проверяет валидность "нормализированного" номера и возвращает его в стандарте +380, или возвращает False если невалиден
        sanitized_phone =sanitize_phone_number(phone)
        for symbol in sanitized_phone: # должен содержать только цифры
            if symbol not in "0123456789": return False 
        if sanitized_phone[0:3] == "380" and  len(sanitized_phone) == 12: return "+" + str(sanitized_phone) # наинаеться с 380 и имеет длинну 12
        elif sanitized_phone[0:1] == "0" and len(sanitized_phone) == 10: return "+38" + str(sanitized_phone) #начинаться с 0 и имеет длинну 10 
        else: return False

    return check_phone_number(sanitize_phone_number(phone))
# ------------------------------------------------------------------------
def input_phone(): 
    # Дает возможность ввести телефон и проверяет его валидность. 
    # Если невалиден - ввод еще раз, Если валиден - возвращает валидный телефон
    phone = input("Введите телефон: ")
    if sanitize_n_check_phone(phone) == False:
        print("Вы ввели некоректный телефон, попробуйте еще раз ;)"); return input_phone()
    else: 
        return sanitize_n_check_phone(phone)
# ------------------------------------------------------------------------
def add_some_phones():
    # Возвращает список от одного и более валидных телефонов.
    # После коректного введения 1 телефона спросит, хочешь ли добавить еще. 
    # И, если ты уже ввел хотя бы 1 валидный номер, а потом захотел ввести еще, но ввел неправильно или передумал вводить,
    # Тебе будет предложено не вводить телефон и двинутся дальше вместо " Ты ввел неправильно, попробуй еще"
    phones_to_add = []
    phones_to_add.append(input_phone())
    print("Номер записан")
    while True:
        answer = input("Если хотите добавит еще 1 номер - введите его. Если хотите продолжить нажмите Enter: ")
        if answer == "":
            break
        else: 
            if sanitize_n_check_phone(answer):
                phones_to_add.append(sanitize_n_check_phone(answer))
                print("Номер записан")
            else: 
                print("Вы ввели невалидный телефон")
    return phones_to_add
# ---------------
# print(add_some_phones())​
# //////////////////////////////////////////////////////////////////
# //////////////////////////////////////////////////////////////////
# //////////////////////////////////////////////////////////////////

# Функция обработки адресса
# Просто дает возможность вводить или не вводить адресс. Проверки нет.
def wanna_enter_adress():
    answer = input("Введите адрес контакта и нажмите Enter. Что бы пропустить - нажмите Enter сразу: ") 
    if answer == "": return None
    else: print("Адресс добавлен"); return answer

# //////////////////////////////////////////////////////////////////
# //////////////////////////////////////////////////////////////////
# //////////////////////////////////////////////////////////////////​
# ФУНКЦИИ ДЛЯ ОБРАБОТКИ ЭМЕЙЛА
# 1. Дать возможность пропустить ввод емейла.
# 2. Проверка введенного емейла ( )

def is_email_correct(email):
    # Функция принимает введенный эмейл, проверяет его, если валиден - возвращает его, иначе - возвращает False
    # ------------------------------------------------------------------------​
    check = re.match(r"[a-zA-Z._]{1}[a-zA-Z._0-9]+@[a-zA-Z]+\.[a-z]{2}[a-z]*", email)
    if check: return email
    return False
    # Критерии проверки:
    # 1. Все буквы только англ алфавита
    # 2. ПРЕФИКС (то что до @)
    # 2.1 начинаеться с латинской буквы, содержит любое число символов
    # 2.2 и может содержать любое число/букву включая нижнее подчеркивание
    # 3. СУФФИКС (то что после @) 
    # 3.1 Состоит из двух частей, разделенных точкой
    # 3.2 После точки должно быть минимум 2 символа
# ------------------------------------------------------------------------
def wanna_enter_email():
    # Функция ничего не принимает, возвращает либо валидное значение емейла, либо None
    # Функция дает возможность ввести эмейл или перейти дальше. В случае ошибки так же предложит пропустить или попробовать заново.
    answer = input("Введите email контакта и нажмите Enter. Что бы пропустить - сразу нажмите Enter: ")
    if answer == "": return None
    else: 
        if is_email_correct(answer): print("email добавлен"); return is_email_correct(answer)
        else: print("Вы ввели недействительный email."); return wanna_enter_email()

# print(wanna_enter_email())​
# //////////////////////////////////////////////////////////////////
# //////////////////////////////////////////////////////////////////
# //////////////////////////////////////////////////////////////////
# ФУНКЦИИ ДЛЯ ОБРАБОТКИ ДАТЫ РОЖДЕНИЯ
# 1. Дать возможность вводить или не вводить день рождения
# 2. Проверка на соответствие заданному формату даты
def is_date_correct(date):
    if re.match(r"(([0-2]{1}[0-9]{1})|([3]{1}[0-1])).(([0]{1}[0-9])|([1]{1}[0-2])).[0-9]{4}",date): return date 
    #валидный формат даты: 01.12.1976 
    return False
# print(is_date_correct("32.06.2339"))
def wanna_enter_birthday():
    answer = input("Введите день рождения в формате 01.09.1986 контакта и нажмите Enter. Что бы пропустить - сразу нажмите Enter: ")
    if answer == "": return None
    else: 
        if is_date_correct(answer): print("день рождения добавлен"); return is_date_correct(answer)
        else: print("Вы ввели недействительную дату."); return wanna_enter_email()
# //////////////////////////////////////////////////////////////////
# //////////////////////////////////////////////////////////////////
# //////////////////////////////////////////////////////////////////
# Собранная функция добавления контакта
# Не принимает аргументов, возвращает словарь с проверенными значениями имени, телефона (телефонов), и по желанию - почта и день рождения
def add_contact():
    result = {}
    result["name"] = input("Введите имя контакта: ")
    result["adress"] = wanna_enter_adress()
    result["phones"] = add_some_phones()
    result["email"] = wanna_enter_email()
    result["birthday"] = wanna_enter_birthday()
    return result

print(add_contact())
